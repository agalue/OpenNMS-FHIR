// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: collectionset.proto

package producer

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NumericAttribute_Type int32

const (
	NumericAttribute_GAUGE   NumericAttribute_Type = 0
	NumericAttribute_COUNTER NumericAttribute_Type = 1
)

var NumericAttribute_Type_name = map[int32]string{
	0: "GAUGE",
	1: "COUNTER",
}

var NumericAttribute_Type_value = map[string]int32{
	"GAUGE":   0,
	"COUNTER": 1,
}

func (x NumericAttribute_Type) String() string {
	return proto.EnumName(NumericAttribute_Type_name, int32(x))
}

func (NumericAttribute_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{1, 0}
}

type StringAttribute struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringAttribute) Reset()         { *m = StringAttribute{} }
func (m *StringAttribute) String() string { return proto.CompactTextString(m) }
func (*StringAttribute) ProtoMessage()    {}
func (*StringAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{0}
}
func (m *StringAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StringAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StringAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StringAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringAttribute.Merge(m, src)
}
func (m *StringAttribute) XXX_Size() int {
	return m.Size()
}
func (m *StringAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_StringAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_StringAttribute proto.InternalMessageInfo

func (m *StringAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StringAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NumericAttribute struct {
	Group                string                `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Name                 string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value                float64               `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	Type                 NumericAttribute_Type `protobuf:"varint,4,opt,name=type,proto3,enum=NumericAttribute_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *NumericAttribute) Reset()         { *m = NumericAttribute{} }
func (m *NumericAttribute) String() string { return proto.CompactTextString(m) }
func (*NumericAttribute) ProtoMessage()    {}
func (*NumericAttribute) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{1}
}
func (m *NumericAttribute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumericAttribute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumericAttribute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumericAttribute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumericAttribute.Merge(m, src)
}
func (m *NumericAttribute) XXX_Size() int {
	return m.Size()
}
func (m *NumericAttribute) XXX_DiscardUnknown() {
	xxx_messageInfo_NumericAttribute.DiscardUnknown(m)
}

var xxx_messageInfo_NumericAttribute proto.InternalMessageInfo

func (m *NumericAttribute) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *NumericAttribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NumericAttribute) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NumericAttribute) GetType() NumericAttribute_Type {
	if m != nil {
		return m.Type
	}
	return NumericAttribute_GAUGE
}

type NodeLevelResource struct {
	NodeId               int64    `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	ForeignSource        string   `protobuf:"bytes,2,opt,name=foreign_source,json=foreignSource,proto3" json:"foreign_source,omitempty"`
	ForeignId            string   `protobuf:"bytes,3,opt,name=foreign_id,json=foreignId,proto3" json:"foreign_id,omitempty"`
	NodeLabel            string   `protobuf:"bytes,4,opt,name=node_label,json=nodeLabel,proto3" json:"node_label,omitempty"`
	Location             string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeLevelResource) Reset()         { *m = NodeLevelResource{} }
func (m *NodeLevelResource) String() string { return proto.CompactTextString(m) }
func (*NodeLevelResource) ProtoMessage()    {}
func (*NodeLevelResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{2}
}
func (m *NodeLevelResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeLevelResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeLevelResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeLevelResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeLevelResource.Merge(m, src)
}
func (m *NodeLevelResource) XXX_Size() int {
	return m.Size()
}
func (m *NodeLevelResource) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeLevelResource.DiscardUnknown(m)
}

var xxx_messageInfo_NodeLevelResource proto.InternalMessageInfo

func (m *NodeLevelResource) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *NodeLevelResource) GetForeignSource() string {
	if m != nil {
		return m.ForeignSource
	}
	return ""
}

func (m *NodeLevelResource) GetForeignId() string {
	if m != nil {
		return m.ForeignId
	}
	return ""
}

func (m *NodeLevelResource) GetNodeLabel() string {
	if m != nil {
		return m.NodeLabel
	}
	return ""
}

func (m *NodeLevelResource) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type InterfaceLevelResource struct {
	Node                 *NodeLevelResource `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Instance             string             `protobuf:"bytes,2,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InterfaceLevelResource) Reset()         { *m = InterfaceLevelResource{} }
func (m *InterfaceLevelResource) String() string { return proto.CompactTextString(m) }
func (*InterfaceLevelResource) ProtoMessage()    {}
func (*InterfaceLevelResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{3}
}
func (m *InterfaceLevelResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterfaceLevelResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterfaceLevelResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterfaceLevelResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterfaceLevelResource.Merge(m, src)
}
func (m *InterfaceLevelResource) XXX_Size() int {
	return m.Size()
}
func (m *InterfaceLevelResource) XXX_DiscardUnknown() {
	xxx_messageInfo_InterfaceLevelResource.DiscardUnknown(m)
}

var xxx_messageInfo_InterfaceLevelResource proto.InternalMessageInfo

func (m *InterfaceLevelResource) GetNode() *NodeLevelResource {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *InterfaceLevelResource) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

type GenericTypeResource struct {
	Node                 *NodeLevelResource `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Type                 string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Instance             string             `protobuf:"bytes,3,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GenericTypeResource) Reset()         { *m = GenericTypeResource{} }
func (m *GenericTypeResource) String() string { return proto.CompactTextString(m) }
func (*GenericTypeResource) ProtoMessage()    {}
func (*GenericTypeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{4}
}
func (m *GenericTypeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenericTypeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenericTypeResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenericTypeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericTypeResource.Merge(m, src)
}
func (m *GenericTypeResource) XXX_Size() int {
	return m.Size()
}
func (m *GenericTypeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericTypeResource.DiscardUnknown(m)
}

var xxx_messageInfo_GenericTypeResource proto.InternalMessageInfo

func (m *GenericTypeResource) GetNode() *NodeLevelResource {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *GenericTypeResource) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GenericTypeResource) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

type ResponseTimeResource struct {
	Instance             string   `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Location             string   `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseTimeResource) Reset()         { *m = ResponseTimeResource{} }
func (m *ResponseTimeResource) String() string { return proto.CompactTextString(m) }
func (*ResponseTimeResource) ProtoMessage()    {}
func (*ResponseTimeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{5}
}
func (m *ResponseTimeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseTimeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseTimeResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseTimeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseTimeResource.Merge(m, src)
}
func (m *ResponseTimeResource) XXX_Size() int {
	return m.Size()
}
func (m *ResponseTimeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseTimeResource.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseTimeResource proto.InternalMessageInfo

func (m *ResponseTimeResource) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

func (m *ResponseTimeResource) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type CollectionSetResource struct {
	// Types that are valid to be assigned to Resource:
	//	*CollectionSetResource_Node
	//	*CollectionSetResource_Interface
	//	*CollectionSetResource_Generic
	//	*CollectionSetResource_Response
	Resource             isCollectionSetResource_Resource `protobuf_oneof:"resource"`
	String_              []*StringAttribute               `protobuf:"bytes,10,rep,name=string,proto3" json:"string,omitempty"`
	Numeric              []*NumericAttribute              `protobuf:"bytes,11,rep,name=numeric,proto3" json:"numeric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CollectionSetResource) Reset()         { *m = CollectionSetResource{} }
func (m *CollectionSetResource) String() string { return proto.CompactTextString(m) }
func (*CollectionSetResource) ProtoMessage()    {}
func (*CollectionSetResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{6}
}
func (m *CollectionSetResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionSetResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionSetResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionSetResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSetResource.Merge(m, src)
}
func (m *CollectionSetResource) XXX_Size() int {
	return m.Size()
}
func (m *CollectionSetResource) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSetResource.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSetResource proto.InternalMessageInfo

type isCollectionSetResource_Resource interface {
	isCollectionSetResource_Resource()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CollectionSetResource_Node struct {
	Node *NodeLevelResource `protobuf:"bytes,1,opt,name=node,proto3,oneof" json:"node,omitempty"`
}
type CollectionSetResource_Interface struct {
	Interface *InterfaceLevelResource `protobuf:"bytes,2,opt,name=interface,proto3,oneof" json:"interface,omitempty"`
}
type CollectionSetResource_Generic struct {
	Generic *GenericTypeResource `protobuf:"bytes,3,opt,name=generic,proto3,oneof" json:"generic,omitempty"`
}
type CollectionSetResource_Response struct {
	Response *ResponseTimeResource `protobuf:"bytes,4,opt,name=response,proto3,oneof" json:"response,omitempty"`
}

func (*CollectionSetResource_Node) isCollectionSetResource_Resource()      {}
func (*CollectionSetResource_Interface) isCollectionSetResource_Resource() {}
func (*CollectionSetResource_Generic) isCollectionSetResource_Resource()   {}
func (*CollectionSetResource_Response) isCollectionSetResource_Resource()  {}

func (m *CollectionSetResource) GetResource() isCollectionSetResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *CollectionSetResource) GetNode() *NodeLevelResource {
	if x, ok := m.GetResource().(*CollectionSetResource_Node); ok {
		return x.Node
	}
	return nil
}

func (m *CollectionSetResource) GetInterface() *InterfaceLevelResource {
	if x, ok := m.GetResource().(*CollectionSetResource_Interface); ok {
		return x.Interface
	}
	return nil
}

func (m *CollectionSetResource) GetGeneric() *GenericTypeResource {
	if x, ok := m.GetResource().(*CollectionSetResource_Generic); ok {
		return x.Generic
	}
	return nil
}

func (m *CollectionSetResource) GetResponse() *ResponseTimeResource {
	if x, ok := m.GetResource().(*CollectionSetResource_Response); ok {
		return x.Response
	}
	return nil
}

func (m *CollectionSetResource) GetString_() []*StringAttribute {
	if m != nil {
		return m.String_
	}
	return nil
}

func (m *CollectionSetResource) GetNumeric() []*NumericAttribute {
	if m != nil {
		return m.Numeric
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CollectionSetResource) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CollectionSetResource_Node)(nil),
		(*CollectionSetResource_Interface)(nil),
		(*CollectionSetResource_Generic)(nil),
		(*CollectionSetResource_Response)(nil),
	}
}

type CollectionSet struct {
	Timestamp            int64                    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Resource             []*CollectionSetResource `protobuf:"bytes,2,rep,name=resource,proto3" json:"resource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CollectionSet) Reset()         { *m = CollectionSet{} }
func (m *CollectionSet) String() string { return proto.CompactTextString(m) }
func (*CollectionSet) ProtoMessage()    {}
func (*CollectionSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a82f6b1e217a62f, []int{7}
}
func (m *CollectionSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectionSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectionSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectionSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSet.Merge(m, src)
}
func (m *CollectionSet) XXX_Size() int {
	return m.Size()
}
func (m *CollectionSet) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSet.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSet proto.InternalMessageInfo

func (m *CollectionSet) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CollectionSet) GetResource() []*CollectionSetResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func init() {
	proto.RegisterEnum("NumericAttribute_Type", NumericAttribute_Type_name, NumericAttribute_Type_value)
	proto.RegisterType((*StringAttribute)(nil), "StringAttribute")
	proto.RegisterType((*NumericAttribute)(nil), "NumericAttribute")
	proto.RegisterType((*NodeLevelResource)(nil), "NodeLevelResource")
	proto.RegisterType((*InterfaceLevelResource)(nil), "InterfaceLevelResource")
	proto.RegisterType((*GenericTypeResource)(nil), "GenericTypeResource")
	proto.RegisterType((*ResponseTimeResource)(nil), "ResponseTimeResource")
	proto.RegisterType((*CollectionSetResource)(nil), "CollectionSetResource")
	proto.RegisterType((*CollectionSet)(nil), "CollectionSet")
}

func init() { proto.RegisterFile("collectionset.proto", fileDescriptor_8a82f6b1e217a62f) }

var fileDescriptor_8a82f6b1e217a62f = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xd6, 0xfa, 0x27, 0x8e, 0x46, 0x24, 0x75, 0x36, 0x4e, 0x22, 0x4a, 0x6a, 0x8c, 0xa0, 0x45,
	0xb4, 0x20, 0x8a, 0x72, 0xe8, 0x21, 0xa7, 0x24, 0x84, 0xd8, 0x10, 0x5c, 0x58, 0x3b, 0x97, 0x52,
	0x08, 0xb2, 0x34, 0x31, 0x02, 0xfd, 0x21, 0xad, 0x02, 0x79, 0x93, 0x9e, 0xfa, 0x06, 0x7d, 0x8b,
	0x1e, 0x7a, 0xec, 0x23, 0x14, 0xf7, 0x45, 0xca, 0xae, 0xd6, 0x72, 0xed, 0x18, 0x4a, 0x6f, 0x9a,
	0x99, 0x6f, 0xbe, 0x99, 0xf9, 0x66, 0x47, 0x70, 0xe8, 0xa7, 0x51, 0x84, 0x3e, 0x0f, 0xd3, 0xa4,
	0x40, 0xee, 0x64, 0x79, 0xca, 0x53, 0xeb, 0x1c, 0x5e, 0x4c, 0x78, 0x1e, 0x26, 0xf3, 0x0b, 0xce,
	0xf3, 0x70, 0x56, 0x72, 0xa4, 0x14, 0x5a, 0x89, 0x17, 0xa3, 0x49, 0x06, 0xc4, 0xd6, 0x99, 0xfc,
	0xa6, 0x3d, 0x68, 0x3f, 0x7a, 0x51, 0x89, 0x66, 0x43, 0x3a, 0x2b, 0xc3, 0xfa, 0x4a, 0xa0, 0x3b,
	0x2e, 0x63, 0xcc, 0x43, 0x7f, 0x95, 0xde, 0x83, 0xf6, 0x3c, 0x4f, 0xcb, 0x4c, 0xe5, 0x57, 0x46,
	0x4d, 0xda, 0xd8, 0x46, 0xda, 0x1c, 0x10, 0x9b, 0x28, 0x52, 0xfa, 0x16, 0x5a, 0xfc, 0x29, 0x43,
	0xb3, 0x35, 0x20, 0xf6, 0xbe, 0x7b, 0xec, 0x6c, 0x16, 0x70, 0xa6, 0x4f, 0x19, 0x32, 0x89, 0xb1,
	0xfa, 0xd0, 0x12, 0x16, 0xd5, 0xa1, 0x7d, 0x73, 0x71, 0x77, 0x73, 0xdd, 0xd5, 0xa8, 0x01, 0x9d,
	0xab, 0x8f, 0x77, 0xe3, 0xe9, 0x35, 0xeb, 0x12, 0xeb, 0x1b, 0x81, 0x83, 0x71, 0x1a, 0xe0, 0x2d,
	0x3e, 0x62, 0xc4, 0xb0, 0x48, 0xcb, 0xdc, 0x47, 0x7a, 0x02, 0x9d, 0x24, 0x0d, 0xf0, 0x3e, 0x0c,
	0x64, 0x8f, 0x4d, 0xb6, 0x23, 0xcc, 0x51, 0x40, 0x5f, 0xc3, 0xfe, 0x43, 0x9a, 0x63, 0x38, 0x4f,
	0xee, 0x2b, 0xa8, 0x6a, 0x77, 0x4f, 0x79, 0x27, 0x55, 0xfe, 0x2b, 0x80, 0x25, 0x2c, 0x0c, 0x64,
	0xf3, 0x3a, 0xd3, 0x95, 0x67, 0x14, 0x88, 0xb0, 0xa4, 0x8f, 0xbc, 0x19, 0x46, 0x72, 0x0c, 0x9d,
	0xe9, 0xc2, 0x73, 0x2b, 0x1c, 0xf4, 0x25, 0xec, 0x46, 0xa9, 0xef, 0x89, 0x35, 0x98, 0x6d, 0x19,
	0xac, 0x6d, 0xeb, 0x33, 0x1c, 0x8f, 0x12, 0x8e, 0xf9, 0x83, 0xe7, 0x6f, 0xf4, 0xfc, 0x06, 0x5a,
	0x82, 0x42, 0x36, 0x6c, 0xb8, 0xd4, 0x79, 0x36, 0x15, 0x93, 0x71, 0xc1, 0x1e, 0x26, 0x05, 0xf7,
	0x92, 0xba, 0xf9, 0xda, 0xb6, 0x62, 0x38, 0xbc, 0xc1, 0x44, 0x88, 0x29, 0x25, 0xfc, 0x5f, 0x6a,
	0xaa, 0x16, 0xa3, 0x56, 0x28, 0xbe, 0xd7, 0xca, 0x35, 0x37, 0xca, 0x8d, 0xa1, 0xc7, 0xb0, 0xc8,
	0xc4, 0x6b, 0x9b, 0x86, 0xf1, 0xaa, 0xde, 0xdf, 0x39, 0x64, 0x3d, 0x67, 0x4d, 0x9c, 0xc6, 0x86,
	0x38, 0xdf, 0x1b, 0x70, 0x74, 0x55, 0x3f, 0xe1, 0x09, 0xf2, 0x9a, 0xd1, 0xfe, 0xd7, 0x04, 0x43,
	0x4d, 0xcd, 0xf0, 0x01, 0xf4, 0x70, 0x29, 0xb0, 0x2c, 0x60, 0xb8, 0x27, 0xce, 0x76, 0xc9, 0x87,
	0x1a, 0x5b, 0x61, 0xe9, 0x7b, 0xe8, 0xcc, 0x2b, 0xed, 0xe4, 0x9c, 0x86, 0xdb, 0x73, 0xb6, 0x68,
	0x39, 0xd4, 0xd8, 0x12, 0x46, 0xcf, 0x60, 0x37, 0x57, 0xe3, 0xcb, 0x47, 0x60, 0xb8, 0x47, 0xce,
	0x36, 0x3d, 0x86, 0x1a, 0xab, 0x81, 0xd4, 0x86, 0x9d, 0x42, 0x9e, 0xa3, 0x09, 0x83, 0xa6, 0x6d,
	0xb8, 0x5d, 0x67, 0xe3, 0x3a, 0x99, 0x8a, 0xd3, 0x77, 0xd0, 0x49, 0xaa, 0xcb, 0x30, 0x0d, 0x09,
	0x3d, 0x78, 0x76, 0x29, 0x6c, 0x89, 0xb8, 0x04, 0xd9, 0x8b, 0x2c, 0x67, 0x79, 0xb0, 0xb7, 0xa6,
	0x22, 0x3d, 0x05, 0x9d, 0x87, 0x31, 0x16, 0xdc, 0x8b, 0x33, 0x75, 0x10, 0x2b, 0x07, 0x75, 0x57,
	0xa9, 0x66, 0x43, 0x16, 0x3a, 0x76, 0xb6, 0x6e, 0x81, 0xd5, 0xb8, 0xcb, 0xd3, 0x1f, 0x8b, 0x3e,
	0xf9, 0xb9, 0xe8, 0x93, 0x5f, 0x8b, 0x3e, 0xf9, 0xf2, 0xbb, 0xaf, 0x7d, 0x02, 0xe7, 0x3c, 0xcb,
	0xd3, 0xa0, 0xf4, 0x31, 0x9f, 0xed, 0xc8, 0x3f, 0xcf, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x67, 0x3a, 0xa8, 0x75, 0x90, 0x04, 0x00, 0x00,
}

func (m *StringAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StringAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StringAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NumericAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumericAttribute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumericAttribute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintCollectionset(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeLevelResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeLevelResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeLevelResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NodeLabel) > 0 {
		i -= len(m.NodeLabel)
		copy(dAtA[i:], m.NodeLabel)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.NodeLabel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ForeignId) > 0 {
		i -= len(m.ForeignId)
		copy(dAtA[i:], m.ForeignId)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.ForeignId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ForeignSource) > 0 {
		i -= len(m.ForeignSource)
		copy(dAtA[i:], m.ForeignSource)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.ForeignSource)))
		i--
		dAtA[i] = 0x12
	}
	if m.NodeId != 0 {
		i = encodeVarintCollectionset(dAtA, i, uint64(m.NodeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InterfaceLevelResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterfaceLevelResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterfaceLevelResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x12
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenericTypeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenericTypeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenericTypeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResponseTimeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseTimeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseTimeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Instance) > 0 {
		i -= len(m.Instance)
		copy(dAtA[i:], m.Instance)
		i = encodeVarintCollectionset(dAtA, i, uint64(len(m.Instance)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectionSetResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionSetResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSetResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Numeric) > 0 {
		for iNdEx := len(m.Numeric) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Numeric[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollectionset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.String_) > 0 {
		for iNdEx := len(m.String_) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.String_[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollectionset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Resource != nil {
		{
			size := m.Resource.Size()
			i -= size
			if _, err := m.Resource.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CollectionSetResource_Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSetResource_Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Node != nil {
		{
			size, err := m.Node.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CollectionSetResource_Interface) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSetResource_Interface) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Interface != nil {
		{
			size, err := m.Interface.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CollectionSetResource_Generic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSetResource_Generic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Generic != nil {
		{
			size, err := m.Generic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *CollectionSetResource_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSetResource_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Response != nil {
		{
			size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCollectionset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *CollectionSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectionSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectionSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Resource) > 0 {
		for iNdEx := len(m.Resource) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Resource[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollectionset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Timestamp != 0 {
		i = encodeVarintCollectionset(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollectionset(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollectionset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StringAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NumericAttribute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovCollectionset(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeLevelResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeId != 0 {
		n += 1 + sovCollectionset(uint64(m.NodeId))
	}
	l = len(m.ForeignSource)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.ForeignId)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.NodeLabel)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InterfaceLevelResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GenericTypeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseTimeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovCollectionset(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionSetResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		n += m.Resource.Size()
	}
	if len(m.String_) > 0 {
		for _, e := range m.String_ {
			l = e.Size()
			n += 1 + l + sovCollectionset(uint64(l))
		}
	}
	if len(m.Numeric) > 0 {
		for _, e := range m.Numeric {
			l = e.Size()
			n += 1 + l + sovCollectionset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CollectionSetResource_Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Node != nil {
		l = m.Node.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	return n
}
func (m *CollectionSetResource_Interface) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interface != nil {
		l = m.Interface.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	return n
}
func (m *CollectionSetResource_Generic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Generic != nil {
		l = m.Generic.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	return n
}
func (m *CollectionSetResource_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovCollectionset(uint64(l))
	}
	return n
}
func (m *CollectionSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovCollectionset(uint64(m.Timestamp))
	}
	if len(m.Resource) > 0 {
		for _, e := range m.Resource {
			l = e.Size()
			n += 1 + l + sovCollectionset(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCollectionset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollectionset(x uint64) (n int) {
	return sovCollectionset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StringAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StringAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StringAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumericAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumericAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumericAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NumericAttribute_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeLevelResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeLevelResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeLevelResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			m.NodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForeignId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForeignId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterfaceLevelResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterfaceLevelResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterfaceLevelResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &NodeLevelResource{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenericTypeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenericTypeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenericTypeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Node == nil {
				m.Node = &NodeLevelResource{}
			}
			if err := m.Node.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseTimeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseTimeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseTimeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionSetResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionSetResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionSetResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NodeLevelResource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &CollectionSetResource_Node{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interface", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InterfaceLevelResource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &CollectionSetResource_Interface{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GenericTypeResource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &CollectionSetResource_Generic{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResponseTimeResource{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Resource = &CollectionSetResource_Response{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = append(m.String_, &StringAttribute{})
			if err := m.String_[len(m.String_)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Numeric", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Numeric = append(m.Numeric, &NumericAttribute{})
			if err := m.Numeric[len(m.Numeric)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectionSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectionSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectionSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollectionset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollectionset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = append(m.Resource, &CollectionSetResource{})
			if err := m.Resource[len(m.Resource)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollectionset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCollectionset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollectionset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollectionset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollectionset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollectionset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollectionset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollectionset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollectionset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollectionset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollectionset = fmt.Errorf("proto: unexpected end of group")
)
